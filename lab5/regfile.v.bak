module regfile(data_in,writenum,write,readnum,clk,data_out);
  input [15:0] data_in;
  input [2:0] writenum, readnum;
  input write, clk;
  output[15:0] data_out;

  wire [7:0] register_w,register_r; 
  wire [15:0] r0,r1,r2,r3,r4,r5,r6,r7;
  reg ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7;
  reg[15:0] data_out;

  flip #16 R0(clk,ld0,data_in,r0);
  flip #16 R1(clk,ld1,data_in,r1); 
  flip #16 R2(clk,ld2,data_in,r2);
  flip #16 R3(clk,ld3,data_in,r3);
  flip #16 R4(clk,ld4,data_in,r4);
  flip #16 R5(clk,ld5,data_in,r5);
  flip #16 R6(clk,ld6,data_in,r6);
  flip #16 R7(clk,ld7,data_in,r7);

  Dec #(3,8) Write(writenum,register_w);
  Dec #(3,8) Read(readnum,register_r);
  
  always @(*) begin
    case(register_r)
	8'b00000001:data_out = r0;
	8'b00000010:data_out = r1;
	8'b00000100:data_out = r2;
	8'b00001000:data_out = r3;
	8'b00010000:data_out = r4;
	8'b00100000:data_out = r5;
	8'b01000000:data_out = r6;
	8'b10000000:data_out = r7;
    default:data_out = {16{1'b0}};
    endcase
    case({register_w,write})
	{8'b00000001,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b10000000;
	{8'b00000010,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b01000000;
	{8'b00000100,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00100000;
	{8'b00001000,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00010000;
	{8'b00010000,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00001000;
	{8'b00100000,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00000100;
	{8'b01000000,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00000010;
	{8'b10000000,1'b1}:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00000001;
	default:{ld0,ld1,ld2,ld3,ld4,ld5,ld6,ld7}=8'b00000000;
	endcase  
   end
endmodule


module Dec(a, b) ;
  parameter n=2 ;
  parameter m=4 ;

  input  [n-1:0] a ;
  output [m-1:0] b ;

  wire [m-1:0] b = 1 << a ;
endmodule


module flip(clk, load, in, out) ;
  parameter n = 1;  // width
  input clk,load;
  input [n-1:0] in ;
  output [n-1:0] out ;
  reg [n-1:0] out ;

  always @(posedge clk)
    if (load==1'b1)
      out = in;
    else
      out = out;
endmodule 

